/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MainPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/FileTablePlugin.ts
var import_obsidian9 = require("obsidian");

// src/services/FileService.ts
var import_obsidian = require("obsidian");

// src/services/MetadataService.ts
var MetadataService = class {
  constructor(vault) {
    this.vault = vault;
  }
  async getFileInfo(file) {
    const stat = await this.vault.adapter.stat(file.path);
    if (!stat) {
      throw new Error(`Unable to get stats for file: ${file.path}`);
    }
    return {
      name: file.name,
      extension: file.extension,
      createdAt: new Date(stat.ctime),
      modifiedAt: new Date(stat.mtime),
      size: stat.size,
      path: file.path,
      icon: this.getIconForFileType(file.extension),
      folder: this.getFolderPath(file.path)
      // Добавляем путь к папке
    };
  }
  getIconForFileType(extension) {
    const iconMap = {
      pdf: "file-pdf",
      doc: "file-word",
      docx: "file-word",
      xls: "file-excel",
      xlsx: "file-excel",
      ppt: "file-powerpoint",
      pptx: "file-powerpoint",
      jpg: "file-image",
      jpeg: "file-image",
      png: "file-image",
      gif: "file-image",
      mp3: "file-audio",
      wav: "file-audio",
      mp4: "file-video",
      avi: "file-video",
      zip: "file-archive",
      rar: "file-archive"
      // Добавьте другие расширения и соответствующие им иконки
    };
    return iconMap[extension.toLowerCase()] || "file";
  }
  getFolderPath(filePath) {
    const parts = filePath.split("/");
    parts.pop();
    return parts.join("/") || "/";
  }
};

// src/services/FileService.ts
var FileService = class {
  constructor(vault, app) {
    this.vault = vault;
    this.app = app;
    this.metadataService = new MetadataService(vault);
  }
  async getFilesInFolder(folderPath, extensions) {
    const files = this.vault.getFiles().filter((file) => {
      const isInFolder = folderPath === "" || file.path.startsWith(folderPath);
      const hasCorrectExtension = extensions.includes(file.extension);
      return isInFolder && hasCorrectExtension;
    });
    const uniqueFiles = /* @__PURE__ */ new Map();
    files.forEach((file) => {
      if (!uniqueFiles.has(file.path)) {
        uniqueFiles.set(file.path, file);
      }
    });
    const fileInfoPromises = Array.from(uniqueFiles.values()).map((file) => this.metadataService.getFileInfo(file));
    return Promise.all(fileInfoPromises);
  }
  openFile(path) {
    const file = this.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian.TFile) {
      const extension = file.extension.toLowerCase();
      const isImageOrPdf = ["png", "jpg", "jpeg", "gif", "bmp", "svg", "pdf"].includes(extension);
      let leaf;
      if (isImageOrPdf) {
        leaf = this.app.workspace.getLeaf("tab");
      } else {
        leaf = this.getLeaf();
      }
      leaf.openFile(file, { active: true });
    }
  }
  getLeaf() {
    const leaf = this.app.workspace.getMostRecentLeaf();
    if (leaf && !leaf.getViewState().pinned) {
      return leaf;
    }
    return this.app.workspace.getLeaf("tab");
  }
};

// src/services/FolderService.ts
var import_obsidian2 = require("obsidian");
var FolderService = class {
  constructor(vault) {
    this.vault = vault;
  }
  getFolders() {
    const folders = [{ name: "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430", path: "" }];
    this.traverseFolders(this.vault.getRoot(), folders);
    return folders;
  }
  traverseFolders(folder, result) {
    folder.children.forEach((child) => {
      if (child instanceof import_obsidian2.TFolder) {
        result.push({ name: child.name, path: child.path });
        this.traverseFolders(child, result);
      }
    });
  }
  // ... остальной код ...
};

// src/ui/FileTable.ts
var import_obsidian4 = require("obsidian");

// src/ui/FileTableUtils.ts
function formatFileSize(bytes) {
  if (bytes === 0)
    return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

// src/ui/FileTableRenderer.ts
var import_obsidian3 = require("obsidian");
var FileTableRenderer = class {
  constructor(fileTable, containerEl, onFileOpen, plugin) {
    this.fileTable = fileTable;
    this.containerEl = containerEl;
    this.onFileOpen = onFileOpen;
    this.plugin = plugin;
  }
  renderHeader(table) {
    const thead = table.createTHead();
    const row = thead.insertRow();
    const columns = ["name", "extension", "folder", "createdAt", "modifiedAt", "size"];
    columns.forEach((column) => {
      const th = row.createEl("th");
      th.dataset.column = column;
      const button = th.createEl("button");
      button.textContent = this.capitalizeFirstLetter(column);
      const sortIndicator = button.createSpan({ cls: "sort-indicator" });
      button.addEventListener("click", () => {
        this.fileTable.getSorter().sortBy(column);
        this.fileTable.applyFiltersAndSort();
        this.fileTable.updateTableContent();
        this.updateSortIndicators(thead);
        this.fileTable.saveTableState();
      });
      const input = th.createEl("input", { type: "text" });
      input.placeholder = `\u0424\u0438\u043B\u044C\u0442\u0440 ${column}`;
      input.addEventListener("input", (event) => {
        this.fileTable.getFilter().setFilter(column, event.target.value);
        this.fileTable.applyFiltersAndSort();
        this.fileTable.updateTableContent();
        this.fileTable.saveTableState();
      });
    });
    this.updateSortIndicators(thead);
  }
  updateSortIndicators(thead) {
    const sortColumn = this.fileTable.getSorter().getSortColumn();
    const sortDirection = this.fileTable.getSorter().getSortDirection();
    thead.querySelectorAll("th button").forEach((button, index) => {
      const sortIndicator = button.querySelector(".sort-indicator");
      if (sortIndicator) {
        if (index === this.getColumnIndex(sortColumn)) {
          sortIndicator.textContent = sortDirection === "asc" ? " \u25B2" : " \u25BC";
        } else {
          sortIndicator.textContent = "";
        }
      }
    });
  }
  getColumnIndex(column) {
    const columns = ["name", "extension", "folder", "createdAt", "modifiedAt", "size"];
    return columns.indexOf(column);
  }
  renderBody(table) {
    const tbody = table.createTBody();
    const files = this.fileTable.getFilteredFiles();
    const groupedFiles = this.fileTable.getGroupByFolder() ? this.groupFilesByFolder(files) : { "\u0412\u0441\u0435 \u0444\u0430\u0439\u043B\u044B": files };
    Object.entries(groupedFiles).forEach(([folder, filesInFolder]) => {
      if (this.fileTable.getCurrentFolder() === "" || folder === this.fileTable.getCurrentFolder()) {
        if (this.fileTable.getGroupByFolder() || folder === "\u0412\u0441\u0435 \u0444\u0430\u0439\u043B\u044B") {
          this.renderFolderRow(tbody, folder);
        }
        filesInFolder.forEach((file) => {
          this.renderFileRow(tbody, file);
        });
      }
    });
  }
  renderFolderRow(tbody, folder) {
    const row = tbody.insertRow();
    row.classList.add("folder-header");
    const cell = row.insertCell();
    cell.colSpan = 5;
    cell.textContent = folder;
    const ignoreCell = row.insertCell();
    const ignoreButton = new import_obsidian3.ButtonComponent(ignoreCell).setIcon("cross").setTooltip("\u0418\u0433\u043D\u043E\u0440\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u0430\u043F\u043A\u0443").setClass("ignore-folder-button").onClick((e) => {
      e.stopPropagation();
      this.fileTable.addIgnoredFolder(folder);
    });
  }
  renderFileRow(tbody, file) {
    const row = tbody.insertRow();
    row.addEventListener("click", () => this.onFileOpen(file.path));
    this.createCell(row, file.name);
    this.createCell(row, file.extension);
    this.createCell(row, file.folder);
    this.createCell(row, file.createdAt.toLocaleString());
    this.createCell(row, file.modifiedAt.toLocaleString());
    this.createCell(row, formatFileSize(file.size));
  }
  createCell(row, content) {
    const cell = row.insertCell();
    cell.textContent = content;
  }
  capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  groupFilesByFolder(files) {
    return files.reduce((acc, file) => {
      const folder = file.folder || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
      if (!acc[folder]) {
        acc[folder] = [];
      }
      acc[folder].push(file);
      return acc;
    }, {});
  }
};

// src/ui/FileTableSorter.ts
var FileTableSorter = class {
  constructor() {
    this.sortColumn = "name";
    this.sortDirection = "asc";
  }
  sortBy(column) {
    if (this.sortColumn === column) {
      this.sortDirection = this.sortDirection === "asc" ? "desc" : "asc";
    } else {
      this.sortColumn = column;
      this.sortDirection = "asc";
    }
  }
  setSortColumn(column) {
    this.sortColumn = column;
  }
  setSortDirection(direction) {
    this.sortDirection = direction;
  }
  sortFiles(files) {
    return [...files].sort((a, b) => {
      const aValue = a[this.sortColumn];
      const bValue = b[this.sortColumn];
      if (aValue instanceof Date && bValue instanceof Date) {
        return this.sortDirection === "asc" ? aValue.getTime() - bValue.getTime() : bValue.getTime() - aValue.getTime();
      }
      if (typeof aValue === "string" && typeof bValue === "string") {
        return this.sortDirection === "asc" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
      }
      if (typeof aValue === "number" && typeof bValue === "number") {
        return this.sortDirection === "asc" ? aValue - bValue : bValue - aValue;
      }
      return 0;
    });
  }
  getSortColumn() {
    return this.sortColumn;
  }
  getSortDirection() {
    return this.sortDirection;
  }
};

// src/ui/FileTableFilter.ts
var FileTableFilter = class {
  constructor() {
    this.filters = {};
  }
  setFilter(column, value) {
    this.filters[column] = value;
  }
  // New method to set multiple filters
  setFilters(filters) {
    this.filters = { ...this.filters, ...filters };
  }
  applyFilters(files, currentFolder, selectedFolders) {
    return files.filter(
      (file) => Object.entries(this.filters).every(([column, filterValue]) => {
        if (!filterValue)
          return true;
        const fileValue = file[column];
        return String(fileValue).toLowerCase().includes(filterValue.toLowerCase());
      }) && (currentFolder === "" || file.folder === currentFolder) && (selectedFolders.length === 0 || selectedFolders.includes(file.folder))
    );
  }
  getFilters() {
    return this.filters;
  }
};

// src/ui/FileTable.ts
var import_obsidian5 = require("obsidian");
var FileTable = class extends import_obsidian4.Component {
  constructor(containerEl, onFileOpen, plugin) {
    super();
    this.containerEl = containerEl;
    this.onFileOpen = onFileOpen;
    this.plugin = plugin;
    this.files = [];
    this.filteredFiles = [];
    this.groupByFolder = false;
    this.currentFolder = "";
    this.selectedFolders = /* @__PURE__ */ new Set();
    this.pageSize = 50;
    this.currentPage = 1;
    this.columnWidths = {};
    this.renderer = new FileTableRenderer(this, containerEl, onFileOpen, plugin);
    this.sorter = new FileTableSorter();
    this.filter = new FileTableFilter();
    this.loadSession();
    this.loadColumnWidths();
    this.render();
  }
  async loadSession() {
    const savedSession = await this.plugin.loadData();
    if (savedSession && savedSession.fileTableSession) {
      this.selectedFolders = new Set(savedSession.fileTableSession.selectedFolders);
      this.currentFolder = savedSession.fileTableSession.currentFolder;
      this.pageSize = savedSession.fileTableSession.pageSize || 50;
      this.currentPage = savedSession.fileTableSession.currentPage || 1;
      this.groupByFolder = savedSession.fileTableSession.groupByFolder || false;
      if (savedSession.fileTableSession.filters) {
        this.filter.setFilters(savedSession.fileTableSession.filters);
      }
      if (savedSession.fileTableSession.sortColumn) {
        this.sorter.setSortColumn(savedSession.fileTableSession.sortColumn);
      }
      if (savedSession.fileTableSession.sortDirection) {
        this.sorter.setSortDirection(savedSession.fileTableSession.sortDirection);
      }
      this.applyFiltersAndSort();
      this.updateTableContent();
    }
  }
  async saveSession() {
    await this.plugin.saveData({
      fileTableSession: {
        selectedFolders: Array.from(this.selectedFolders),
        currentFolder: this.currentFolder,
        pageSize: this.pageSize,
        currentPage: this.currentPage,
        groupByFolder: this.groupByFolder,
        filters: this.filter.getFilters(),
        sortColumn: this.sorter.getSortColumn(),
        sortDirection: this.sorter.getSortDirection()
      }
    });
  }
  updateFileTable(files, groupByFolder) {
    if (files) {
      this.files = files;
    }
    if (groupByFolder !== void 0) {
      this.groupByFolder = groupByFolder;
    }
    this.applyFiltersAndSort();
    this.updateTableContent();
    this.saveSession();
  }
  render() {
    this.containerEl.empty();
    this.containerEl.addClass("file-table-container");
    const controlsEl = this.containerEl.createDiv({ cls: "file-table-controls compact" });
    this.renderCompactFolderSettings(controlsEl);
    this.renderPaginationControls(controlsEl);
    const tableWrapper = this.containerEl.createDiv({ cls: "file-table-wrapper" });
    this.renderTable(tableWrapper);
  }
  renderTable(containerEl) {
    const table = containerEl.createEl("table", { cls: "file-table" });
    this.renderer.renderHeader(table);
    this.renderer.renderBody(table);
    this.applyColumnWidths(table);
    this.makeColumnsResizable(table);
  }
  makeColumnsResizable(table) {
    const headers = table.querySelectorAll("th");
    headers.forEach((header, index) => {
      const column = header.dataset.column;
      if (this.columnWidths[column]) {
        header.style.width = this.columnWidths[column];
      }
      const resizer = header.createEl("div", { cls: "resizer" });
      let startX, startWidth;
      const onMouseMove = (e) => {
        const dx = e.clientX - startX;
        const newWidth = `${startWidth + dx}px`;
        header.style.width = newWidth;
        this.columnWidths[column] = newWidth;
        const cells = table.querySelectorAll(`td:nth-child(${index + 1})`);
        cells.forEach((cell) => cell.style.width = newWidth);
      };
      const onMouseUp = () => {
        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
        this.saveColumnWidths();
      };
      resizer.addEventListener("mousedown", (e) => {
        startX = e.clientX;
        startWidth = header.offsetWidth;
        document.addEventListener("mousemove", onMouseMove);
        document.addEventListener("mouseup", onMouseUp);
      });
    });
  }
  async saveColumnWidths() {
    await this.plugin.saveData({
      ...await this.plugin.loadData(),
      columnWidths: this.columnWidths
    });
  }
  async loadColumnWidths() {
    const data = await this.plugin.loadData();
    if (data.columnWidths) {
      this.columnWidths = data.columnWidths;
    }
  }
  renderCompactFolderSettings(containerEl) {
    const settingsEl = containerEl.createDiv({ cls: "compact-folder-settings" });
    new import_obsidian4.ButtonComponent(settingsEl).setIcon("ignore").setTooltip("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0432 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u044B\u0435").onClick(() => this.openFolderSelectorWithCallback(this.addIgnoredFolder.bind(this)));
    new import_obsidian4.ButtonComponent(settingsEl).setIcon("folder").setTooltip("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u0430\u043F\u043A\u0443").onClick(() => this.openFolderSelectorWithCallback(this.addFolder.bind(this)));
    new import_obsidian4.ButtonComponent(settingsEl).setIcon("trash").setTooltip("\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443").onClick(() => {
      this.selectedFolders.clear();
      this.currentFolder = "";
      this.plugin.settings.scannedFolders = [];
      this.plugin.settings.ignoredFolders = [];
      this.plugin.saveSettings();
      this.updateFileTable();
      new import_obsidian4.Notice("\u0422\u0430\u0431\u043B\u0438\u0446\u0430 \u0441\u0431\u0440\u043E\u0448\u0435\u043D\u0430 \u0438 \u043F\u0430\u043F\u043A\u0438 \u043E\u0447\u0438\u0449\u0435\u043D\u044B");
    });
  }
  renderPaginationControls(containerEl) {
    const paginationEl = containerEl.createDiv({ cls: "pagination-controls" });
    const pageSizes = [10, 20, 50, 100, 500];
    const pageSizeDropdown = new import_obsidian4.DropdownComponent(paginationEl);
    pageSizes.forEach((size) => pageSizeDropdown.addOption(size.toString(), size.toString()));
    pageSizeDropdown.setValue(this.pageSize.toString());
    pageSizeDropdown.onChange((value) => {
      this.pageSize = parseInt(value);
      this.currentPage = 1;
      this.updateTableContent();
      this.saveSession();
    });
    new import_obsidian4.ButtonComponent(paginationEl).setIcon("chevron-left").setTooltip("\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430").onClick(() => {
      if (this.currentPage > 1) {
        this.currentPage--;
        this.updateTableContent();
        this.saveSession();
      }
    });
    const pageInfo = paginationEl.createSpan({ cls: "page-info" });
    this.updatePageInfo(pageInfo);
    paginationEl.appendChild(pageInfo);
    new import_obsidian4.ButtonComponent(paginationEl).setIcon("chevron-right").setTooltip("\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430").onClick(() => {
      if (this.currentPage < this.getTotalPages()) {
        this.currentPage++;
        this.updateTableContent();
        this.saveSession();
      }
    });
  }
  updatePageInfo(pageInfoEl) {
    pageInfoEl.textContent = `\u0421\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${this.currentPage} \u0438\u0437 ${this.getTotalPages()}`;
  }
  getTotalPages() {
    return Math.ceil(this.filteredFiles.length / this.pageSize);
  }
  applyFiltersAndSort() {
    this.filteredFiles = this.filter.applyFilters(this.files, this.currentFolder, Array.from(this.selectedFolders));
    this.filteredFiles = this.sorter.sortFiles(this.filteredFiles);
    this.currentPage = 1;
  }
  updateTableContent() {
    const tableWrapper = this.containerEl.querySelector(".file-table-wrapper");
    if (tableWrapper instanceof HTMLElement) {
      const existingTable = tableWrapper.querySelector("table");
      if (existingTable) {
        const headers = existingTable.querySelectorAll("th");
        headers.forEach((header) => {
          const column = header.dataset.column;
          if (column) {
            this.columnWidths[column] = header.style.width;
          }
        });
        const tbody = existingTable.querySelector("tbody");
        if (tbody) {
          tbody.remove();
        }
        this.renderer.renderBody(existingTable);
        this.applyColumnWidths(existingTable);
      } else {
        tableWrapper.empty();
        this.renderTable(tableWrapper);
      }
    } else {
      console.error("Table wrapper not found or is not an HTMLElement");
    }
    const pageInfoEl = this.containerEl.querySelector(".page-info");
    if (pageInfoEl instanceof HTMLElement) {
      this.updatePageInfo(pageInfoEl);
    } else {
      console.error("Page info element not found or is not an HTMLElement");
    }
  }
  applyColumnWidths(table) {
    const headers = table.querySelectorAll("th");
    headers.forEach((header, index) => {
      const column = header.dataset.column;
      if (column && this.columnWidths[column]) {
        header.style.width = this.columnWidths[column];
        const cells = table.querySelectorAll(`td:nth-child(${index + 1})`);
        cells.forEach((cell) => cell.style.width = this.columnWidths[column]);
      }
    });
  }
  openFolderSelectorWithCallback(callback) {
    new FolderSuggestModal(this.plugin.app, (folder) => {
      callback(folder);
    }).open();
  }
  addFolder(folder) {
    if (!this.selectedFolders.has(folder)) {
      this.selectedFolders.add(folder);
      this.plugin.settings.scannedFolders.push(folder);
      this.plugin.saveSettings();
      this.updateFileTable();
      new import_obsidian4.Notice(`\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430 \u043F\u0430\u043F\u043A\u0430: ${folder}`);
    } else {
      new import_obsidian4.Notice(`\u041F\u0430\u043F\u043A\u0430 ${folder} \u0443\u0436\u0435 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430`);
    }
  }
  addIgnoredFolder(folder) {
    if (!this.plugin.settings.ignoredFolders.includes(folder)) {
      this.plugin.settings.ignoredFolders.push(folder);
      this.plugin.saveSettings();
      this.plugin.updateFileTable();
      new import_obsidian4.Notice(`\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0430 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u0430\u044F \u043F\u0430\u043F\u043A\u0430: ${folder}`);
    } else {
      new import_obsidian4.Notice(`\u041F\u0430\u043F\u043A\u0430 ${folder} \u0443\u0436\u0435 \u0432 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u044B\u0445`);
    }
  }
  removeFolder(folder) {
    if (this.selectedFolders.has(folder)) {
      this.selectedFolders.delete(folder);
      this.plugin.updateFileTable();
      new import_obsidian4.Notice(`\u0423\u0434\u0430\u043B\u0435\u043D\u0430 \u043F\u0430\u043F\u043A\u0430: ${folder}`);
    }
  }
  removeIgnoredFolder(folder) {
    if (this.plugin.settings.ignoredFolders.includes(folder)) {
      this.plugin.settings.ignoredFolders = this.plugin.settings.ignoredFolders.filter((f) => f !== folder);
      this.plugin.saveSettings();
      this.plugin.updateFileTable();
      new import_obsidian4.Notice(`\u0423\u0434\u0430\u043B\u0435\u043D\u0430 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u0430\u044F \u043F\u0430\u043F\u043A\u0430: ${folder}`);
    }
  }
  getFilteredFiles() {
    const start = (this.currentPage - 1) * this.pageSize;
    const end = start + this.pageSize;
    return this.filteredFiles.slice(start, end);
  }
  getGroupByFolder() {
    return this.groupByFolder;
  }
  getCurrentFolder() {
    return this.currentFolder;
  }
  getSorter() {
    return this.sorter;
  }
  getFilter() {
    return this.filter;
  }
  getPlugin() {
    return this.plugin;
  }
  getColumnWidths() {
    return this.columnWidths;
  }
  saveTableState() {
    this.saveSession();
  }
};
var FolderSuggestModal = class extends import_obsidian5.FuzzySuggestModal {
  constructor(app, selectFolder) {
    super(app);
    this.selectFolder = selectFolder;
  }
  getItems() {
    return ["", ...this.getAllFolderPaths()];
  }
  getItemText(item) {
    return item || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
  }
  onChooseItem(item, evt) {
    this.selectFolder(item);
  }
  renderSuggestion(item, el) {
    el.setText(this.getItemText(item.item));
  }
  getAllFolderPaths() {
    const folders = [];
    const stack = [this.app.vault.getRoot()];
    while (stack.length > 0) {
      const currentFolder = stack.pop();
      folders.push(currentFolder.path);
      currentFolder.children.filter((child) => child instanceof import_obsidian5.TFolder).forEach((childFolder) => stack.push(childFolder));
    }
    return folders;
  }
};

// src/ui/SettingsTab.ts
var import_obsidian6 = require("obsidian");
var import_obsidian7 = require("obsidian");
var SettingsTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 File Table Plugin" });
    containerEl.createEl("h3", { text: "\u041E\u0441\u043D\u043E\u0432\u043D\u044B\u0435 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438" });
    new import_obsidian6.Setting(containerEl).setName("\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F \u0444\u0430\u0439\u043B\u043E\u0432").setDesc("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F \u0444\u0430\u0439\u043B\u043E\u0432 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043F\u044F\u0442\u0443\u044E (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: pdf,cdr,eps)").addText((text) => text.setPlaceholder("pdf,cdr,eps").setValue(this.plugin.settings.fileExtensions.join(",")).onChange(async (value) => {
      this.plugin.settings.fileExtensions = value.split(",").map((ext) => ext.trim());
      await this.plugin.saveSettings();
    }));
    new import_obsidian6.Setting(containerEl).setName("\u0413\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u043F\u0430\u043F\u043A\u0430\u043C").setDesc("\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0443 \u0444\u0430\u0439\u043B\u043E\u0432 \u043F\u043E \u043F\u0430\u043F\u043A\u0430\u043C").addToggle((toggle) => toggle.setValue(this.plugin.settings.groupByFolder).onChange(async (value) => {
      this.plugin.settings.groupByFolder = value;
      await this.plugin.saveSettings();
      await this.plugin.updateFileTable();
    }));
    containerEl.createEl("h3", { text: "\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435" });
    new import_obsidian6.Setting(containerEl).setName("\u041C\u0435\u0441\u0442\u043E \u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F").setDesc("\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435, \u0433\u0434\u0435 \u043E\u0442\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443 \u0444\u0430\u0439\u043B\u043E\u0432").addDropdown((dropdown) => dropdown.addOption("left", "\u0421\u043B\u0435\u0432\u0430").addOption("right", "\u0421\u043F\u0440\u0430\u0432\u0430").addOption("main", "\u0412 \u0433\u043B\u0430\u0432\u043D\u043E\u043C \u043E\u043A\u043D\u0435").setValue(this.plugin.settings.openLocation).onChange(async (value) => {
      this.plugin.settings.openLocation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian6.Setting(containerEl).setName("CSS \u0444\u0430\u0439\u043B").setDesc("\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 CSS \u0444\u0430\u0439\u043B \u0434\u043B\u044F \u0441\u0442\u0438\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0444\u0430\u0439\u043B\u043E\u0432").addDropdown(async (dropdown) => {
      const cssFiles = await this.getCSSFiles();
      cssFiles.forEach((file) => {
        dropdown.addOption(file, file);
      });
      dropdown.setValue(this.plugin.settings.cssFile);
      dropdown.onChange(async (value) => {
        this.plugin.settings.cssFile = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043F\u0430\u043F\u043A\u0430\u043C\u0438" });
    this.renderFolderSection(
      "\u0421\u043A\u0430\u043D\u0438\u0440\u0443\u0435\u043C\u044B\u0435 \u043F\u0430\u043F\u043A\u0438",
      this.plugin.settings.scannedFolders,
      (folder) => this.addScannedFolder(folder),
      (folder) => this.removeScannedFolder(folder)
    );
    containerEl.createEl("hr");
    this.renderFolderSection(
      "\u0418\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u044B\u0435 \u043F\u0430\u043F\u043A\u0438",
      this.plugin.settings.ignoredFolders,
      (folder) => this.addIgnoredFolder(folder),
      (folder) => this.removeIgnoredFolder(folder)
    );
  }
  renderFolderSection(title, folders, addCallback, removeCallback) {
    const sectionEl = this.containerEl.createEl("div", { cls: "folder-section" });
    new import_obsidian6.Setting(sectionEl).setName(title).setDesc(`\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043F\u0430\u043F\u043A\u0438 \u0434\u043B\u044F ${title.toLowerCase()}`).addButton((button) => button.setButtonText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u0430\u043F\u043A\u0443").onClick(() => {
      new FolderSuggestModal2(this.app, (folder) => {
        addCallback(folder);
      }).open();
    }));
    folders.forEach((folder) => {
      new import_obsidian6.Setting(sectionEl).setName(folder || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430").addButton((button) => button.setIcon("trash").setTooltip(`\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437 ${title.toLowerCase()}`).onClick(() => removeCallback(folder)));
    });
  }
  addScannedFolder(folder) {
    if (!this.plugin.settings.scannedFolders.includes(folder)) {
      this.plugin.settings.scannedFolders.push(folder);
      this.plugin.saveSettings();
      this.display();
    }
  }
  removeScannedFolder(folder) {
    this.plugin.settings.scannedFolders = this.plugin.settings.scannedFolders.filter((f) => f !== folder);
    this.plugin.saveSettings();
    this.display();
  }
  addIgnoredFolder(folder) {
    if (!this.plugin.settings.ignoredFolders.includes(folder)) {
      this.plugin.settings.ignoredFolders.push(folder);
      this.plugin.saveSettings();
      this.display();
    }
  }
  removeIgnoredFolder(folder) {
    this.plugin.settings.ignoredFolders = this.plugin.settings.ignoredFolders.filter((f) => f !== folder);
    this.plugin.saveSettings();
    this.display();
  }
  async getCSSFiles() {
    const cssFiles = [];
    const pluginDir = (0, import_obsidian6.normalizePath)(this.app.vault.configDir + "/plugins/file-table-plugin");
    try {
      const pluginFiles = await this.app.vault.adapter.list(pluginDir);
      pluginFiles.files.filter((file) => file.endsWith(".css")).forEach((file) => cssFiles.push((0, import_obsidian6.normalizePath)(file)));
    } catch (error) {
      console.error("Failed to read plugin directory:", error);
    }
    cssFiles.push("styles.css");
    cssFiles.push("altstyles.css");
    const uniqueCssFiles = Array.from(new Set(cssFiles)).sort();
    console.log("Available CSS files:", uniqueCssFiles);
    return uniqueCssFiles;
  }
  getFolders() {
    const folders = [{ path: "", name: "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430" }];
    const iterateFolder = (folder, path = "") => {
      folder.children.forEach((child) => {
        if (child instanceof import_obsidian6.TFolder) {
          const childPath = path ? `${path}/${child.name}` : child.name;
          folders.push({ path: childPath, name: childPath });
          iterateFolder(child, childPath);
        }
      });
    };
    iterateFolder(this.app.vault.getRoot());
    return folders;
  }
};
var FolderSuggestModal2 = class extends import_obsidian7.FuzzySuggestModal {
  constructor(app, selectFolder) {
    super(app);
    this.selectFolder = selectFolder;
  }
  getItems() {
    return ["", ...this.getAllFolderPaths()];
  }
  getItemText(item) {
    return item || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
  }
  onChooseItem(item, evt) {
    this.selectFolder(item);
  }
  renderSuggestion(item, el) {
    el.setText(this.getItemText(item.item));
  }
  getAllFolderPaths() {
    const folders = [];
    const stack = [this.app.vault.getRoot()];
    while (stack.length > 0) {
      const currentFolder = stack.pop();
      folders.push(currentFolder.path);
      currentFolder.children.filter((child) => child instanceof import_obsidian6.TFolder).forEach((childFolder) => stack.push(childFolder));
    }
    return folders;
  }
};

// src/ui/FolderFilterModal.ts
var import_obsidian8 = require("obsidian");
var FolderFilterModal = class extends import_obsidian8.FuzzySuggestModal {
  constructor(app, folderService, onChoose) {
    super(app);
    this.folderService = folderService;
    this.onChoose = onChoose;
  }
  getItems() {
    return ["", ...this.folderService.getFolders().map((folder) => folder.path)];
  }
  getItemText(item) {
    return item || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
  }
  onChooseItem(item, evt) {
    this.onChoose(item);
  }
  renderSuggestion(item, el) {
    el.setText(this.getItemText(item.item));
  }
};

// src/FileTablePlugin.ts
var DEFAULT_SETTINGS = {
  fileExtensions: ["pdf", "cdr", "eps"],
  groupByFolder: false,
  openLocation: "right",
  cssFile: "styles.css",
  scannedFolders: [],
  ignoredFolders: []
  // Инициализация пустым массивом
};
var FileTablePlugin = class extends import_obsidian9.Plugin {
  constructor() {
    super(...arguments);
    this.currentStyleElement = null;
  }
  async onload() {
    await this.loadSettings();
    this.fileService = new FileService(this.app.vault, this.app);
    this.folderService = new FolderService(this.app.vault);
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerView(FILE_TABLE_VIEW_TYPE, (leaf) => {
      this.fileTableView = new FileTableView(leaf, this);
      return this.fileTableView;
    });
    this.addRibbonIcon("table", "Open File Table", () => {
      this.activateView();
    });
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
    this.registerEvent(this.app.vault.on("create", () => this.updateFileTable()));
    this.registerEvent(this.app.vault.on("delete", () => this.updateFileTable()));
    this.registerEvent(this.app.vault.on("rename", () => this.updateFileTable()));
    this.registerEvent(this.app.vault.on("modify", () => this.updateFileTable()));
    await this.loadSelectedCSS();
    this.updateFileTable();
    this.addCommand({
      id: "open-folder-filter-modal",
      name: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E\u0435 \u043E\u043A\u043D\u043E \u0444\u0438\u043B\u044C\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u043E \u043F\u0430\u043F\u043A\u0430\u043C",
      callback: () => {
        new FolderFilterModal(this.app, this.folderService, (folder) => {
          if (this.fileTableView) {
            this.fileTableView.updateFileTable();
          }
        }).open();
      }
    });
    this.registerEvent(this.app.workspace.on("quit", this.saveSettings.bind(this)));
  }
  async loadSelectedCSS() {
    if (this.currentStyleElement) {
      this.currentStyleElement.remove();
    }
    let cssContent;
    try {
      const cssPath = (0, import_obsidian9.normalizePath)(this.manifest.dir + "/" + this.settings.cssFile);
      cssContent = await this.app.vault.adapter.read(cssPath);
    } catch (error) {
      console.error(`Failed to load CSS file: ${this.settings.cssFile}`, error);
      cssContent = await this.loadDefaultCSS();
    }
    this.currentStyleElement = document.createElement("style");
    this.currentStyleElement.textContent = cssContent;
    document.head.appendChild(this.currentStyleElement);
  }
  async loadDefaultCSS() {
    return `
      .file-table-container { /* Default styles */ }
      .file-table { /* Default styles */ }
      /* Add more default styles here */
    `;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    await this.loadSelectedCSS();
    await this.updateFileTable();
  }
  async updateFileTable(files, groupByFolder) {
    if (this.fileTableView) {
      files = await this.getAllFilesInScannedFolders();
      await this.fileTableView.updateFileTable(files, groupByFolder);
      await this.saveSettings();
    }
  }
  async getAllFilesInScannedFolders() {
    const allFiles = [];
    for (const folder of this.settings.scannedFolders) {
      const files = await this.fileService.getFilesInFolder(folder, this.settings.fileExtensions);
      allFiles.push(...files);
    }
    return allFiles.filter(
      (file) => !this.settings.ignoredFolders.some(
        (ignoredFolder) => file.folder === ignoredFolder || file.folder.startsWith(ignoredFolder + "/")
      )
    );
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(FILE_TABLE_VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf(false);
      await leaf.setViewState({ type: FILE_TABLE_VIEW_TYPE, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  // Публичные методы для доступа к функциональности fileService
  async getFilesInFolder(folderPath, extensions) {
    return this.fileService.getFilesInFolder(folderPath, extensions);
  }
  openFile(path) {
    this.fileService.openFile(path);
  }
};
var FILE_TABLE_VIEW_TYPE = "file-table-view";
var FileTableView = class extends import_obsidian9.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return FILE_TABLE_VIEW_TYPE;
  }
  getDisplayText() {
    return "File Table";
  }
  async onOpen() {
    this.fileTable = new FileTable(this.containerEl, (path) => this.plugin.openFile(path), this.plugin);
    await this.updateFileTable();
  }
  async onClose() {
  }
  async updateFileTable(files, groupByFolder) {
    if (!files) {
      files = await this.plugin.getAllFilesInScannedFolders();
    }
    if (groupByFolder === void 0) {
      groupByFolder = this.plugin.settings.groupByFolder;
    }
    this.fileTable.updateFileTable(files, groupByFolder);
  }
};

// src/main.ts
var MainPlugin = class extends import_obsidian10.Plugin {
  async onload() {
    this.fileTablePlugin = new FileTablePlugin(this.app, this.manifest);
    await this.fileTablePlugin.onload();
  }
  async onunload() {
    await this.fileTablePlugin.onunload();
  }
};
