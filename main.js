/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MainPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/FileTablePlugin.ts
var import_obsidian6 = require("obsidian");

// src/services/FileService.ts
var import_obsidian = require("obsidian");

// src/services/MetadataService.ts
var MetadataService = class {
  constructor(vault) {
    this.vault = vault;
  }
  async getFileInfo(file) {
    const stat = await this.vault.adapter.stat(file.path);
    if (!stat) {
      throw new Error(`Unable to get stats for file: ${file.path}`);
    }
    return {
      name: file.name,
      extension: file.extension,
      createdAt: new Date(stat.ctime),
      modifiedAt: new Date(stat.mtime),
      size: stat.size,
      path: file.path,
      icon: this.getIconForFileType(file.extension),
      folder: this.getFolderPath(file.path)
      // Добавляем путь к папке
    };
  }
  getIconForFileType(extension) {
    const iconMap = {
      pdf: "file-pdf",
      doc: "file-word",
      docx: "file-word",
      xls: "file-excel",
      xlsx: "file-excel",
      ppt: "file-powerpoint",
      pptx: "file-powerpoint",
      jpg: "file-image",
      jpeg: "file-image",
      png: "file-image",
      gif: "file-image",
      mp3: "file-audio",
      wav: "file-audio",
      mp4: "file-video",
      avi: "file-video",
      zip: "file-archive",
      rar: "file-archive"
      // Добавьте другие расширения и соответствующие им иконки
    };
    return iconMap[extension.toLowerCase()] || "file";
  }
  getFolderPath(filePath) {
    const parts = filePath.split("/");
    parts.pop();
    return parts.join("/") || "/";
  }
};

// src/services/FileService.ts
var FileService = class {
  constructor(vault, app) {
    this.vault = vault;
    this.app = app;
    this.metadataService = new MetadataService(vault);
  }
  async getFilesInFolder(folderPath, extensions) {
    const files = this.vault.getFiles().filter((file) => {
      const isInFolder = folderPath === "" || file.path.startsWith(folderPath);
      const hasCorrectExtension = extensions.includes(file.extension);
      return isInFolder && hasCorrectExtension;
    });
    const uniqueFiles = /* @__PURE__ */ new Map();
    files.forEach((file) => {
      if (!uniqueFiles.has(file.path)) {
        uniqueFiles.set(file.path, file);
      }
    });
    const fileInfoPromises = Array.from(uniqueFiles.values()).map((file) => this.metadataService.getFileInfo(file));
    return Promise.all(fileInfoPromises);
  }
  openFile(path) {
    const file = this.vault.getAbstractFileByPath(path);
    if (file instanceof import_obsidian.TFile) {
      const extension = file.extension.toLowerCase();
      const isImageOrPdf = ["png", "jpg", "jpeg", "gif", "bmp", "svg", "pdf"].includes(extension);
      let leaf;
      if (isImageOrPdf) {
        leaf = this.app.workspace.getLeaf("tab");
      } else {
        leaf = this.getLeaf();
      }
      leaf.openFile(file, { active: true });
    }
  }
  getLeaf() {
    const leaf = this.app.workspace.getMostRecentLeaf();
    if (leaf && !leaf.getViewState().pinned) {
      return leaf;
    }
    return this.app.workspace.getLeaf("tab");
  }
};

// src/services/FolderService.ts
var import_obsidian2 = require("obsidian");
var FolderService = class {
  constructor(vault) {
    this.vault = vault;
  }
  getFolders() {
    const folders = [{ name: "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430", path: "" }];
    this.traverseFolders(this.vault.getRoot(), folders);
    return folders;
  }
  traverseFolders(folder, result) {
    folder.children.forEach((child) => {
      if (child instanceof import_obsidian2.TFolder) {
        result.push({ name: child.name, path: child.path });
        this.traverseFolders(child, result);
      }
    });
  }
  // ... остальной код ...
};

// src/ui/FileTable.ts
var import_obsidian4 = require("obsidian");

// src/ui/FolderFilterModal.ts
var import_obsidian3 = require("obsidian");
var FolderFilterModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(app, folderService, onChoose) {
    super(app);
    this.folderService = folderService;
    this.onChoose = onChoose;
  }
  getItems() {
    return ["", ...this.folderService.getFolders().map((folder) => folder.path)];
  }
  getItemText(item) {
    return item || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
  }
  onChooseItem(item, evt) {
    this.onChoose(item);
  }
  renderSuggestion(item, el) {
    el.setText(this.getItemText(item.item));
  }
};

// src/ui/FileTable.ts
var FileTable = class extends import_obsidian4.Component {
  constructor(containerEl, onFileOpen, plugin) {
    super();
    this.containerEl = containerEl;
    this.onFileOpen = onFileOpen;
    this.files = [];
    this.filteredFiles = [];
    this.groupByFolder = false;
    this.sortColumn = "name";
    this.sortDirection = "asc";
    this.filters = {};
    this.filterInputs = /* @__PURE__ */ new Map();
    this.currentFolder = "";
    this.allFolders = [];
    this.folderHistory = [];
    this.currentHistoryIndex = -1;
    this.currentPage = 1;
    this.pageInfo = null;
    this.firstPageButton = null;
    this.prevPageButton = null;
    this.nextPageButton = null;
    this.lastPageButton = null;
    this.plugin = plugin;
    this.pageSize = this.plugin.settings.pageSize;
    this.columnWidths = this.plugin.settings.columnWidths;
    this.groupByFolder = this.plugin.settings.groupByFolder;
    this.render();
  }
  setFiles(files) {
    console.log("Setting files:", files);
    this.files = files;
    this.updateFolderList();
    this.applyFiltersAndSort();
    this.renderBody();
  }
  setGroupByFolder(groupByFolder) {
    this.groupByFolder = groupByFolder;
    this.plugin.settings.groupByFolder = groupByFolder;
    this.plugin.saveSettings();
    this.applyFiltersAndSort();
    this.renderBody();
  }
  setFolderFilter(folder, addToHistory = true) {
    if (folder !== this.currentFolder) {
      if (addToHistory) {
        if (this.currentHistoryIndex < this.folderHistory.length - 1) {
          this.folderHistory = this.folderHistory.slice(0, this.currentHistoryIndex + 1);
        }
        this.folderHistory.push(this.currentFolder);
        this.currentHistoryIndex = this.folderHistory.length - 1;
      }
      this.currentFolder = folder;
      this.applyFiltersAndSort();
      this.renderBody();
      this.updateFolderList();
    }
  }
  render() {
    this.containerEl.empty();
    this.containerEl.addClass("file-table-container");
    const controlsEl = this.containerEl.createDiv({ cls: "file-table-controls" });
    this.renderFolderControls(controlsEl);
    this.renderPaginationControls(controlsEl);
    const tableWrapper = this.containerEl.createEl("div", { cls: "file-table-wrapper" });
    const table = tableWrapper.createEl("table", { cls: "file-table" });
    this.renderHeader(table);
    this.renderBody(table);
  }
  renderFolderControls(containerEl) {
    const folderControlsEl = containerEl.createDiv({ cls: "folder-controls" });
    new import_obsidian4.ButtonComponent(folderControlsEl).setButtonText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u0430\u043F\u043A\u0443").onClick(() => {
      console.log("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u0430\u043F\u043A\u0443 button clicked");
      if (this.plugin instanceof FileTablePlugin) {
        new FolderFilterModal(this.plugin.app, this.plugin.folderService, (folder) => {
          console.log("Folder selected:", folder);
          this.addFolder(folder);
        }).open();
      } else {
        console.error("Plugin is not an instance of FileTablePlugin");
      }
    });
    new import_obsidian4.ButtonComponent(folderControlsEl).setButtonText("\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443").onClick(() => {
      console.log("\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443 button clicked");
      this.resetTable();
    });
  }
  addFolder(folder) {
    console.log("Adding folder:", folder);
    if (this.plugin instanceof FileTablePlugin) {
      if (!this.plugin.settings.openFolders.includes(folder)) {
        this.plugin.settings.openFolders.push(folder);
        this.plugin.saveSettings();
        this.updateFileTable();
      } else {
        console.log("Folder already exists in openFolders:", folder);
      }
    } else {
      console.error("Plugin is not an instance of FileTablePlugin");
    }
  }
  resetTable() {
    console.log("Resetting table");
    if (this.plugin instanceof FileTablePlugin) {
      this.plugin.settings.openFolders = [];
      this.plugin.saveSettings();
      this.updateFileTable();
    } else {
      console.error("Plugin is not an instance of FileTablePlugin");
    }
  }
  renderPaginationControls(containerEl) {
    const paginationEl = containerEl.createDiv({ cls: "pagination-controls" });
    new import_obsidian4.DropdownComponent(paginationEl).addOptions({ "10": "10", "20": "20", "50": "50", "100": "100", "500": "500" }).setValue(this.pageSize.toString()).onChange((value) => {
      this.pageSize = parseInt(value);
      this.plugin.settings.pageSize = this.pageSize;
      this.plugin.saveSettings();
      this.currentPage = 1;
      this.updatePagination();
      this.renderBody();
    });
    this.firstPageButton = new import_obsidian4.ButtonComponent(paginationEl).setButtonText("\u041F\u0435\u0440\u0432\u0430\u044F").onClick(() => this.goToPage(1));
    this.prevPageButton = new import_obsidian4.ButtonComponent(paginationEl).setButtonText("\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0430\u044F").onClick(() => this.goToPage(this.currentPage - 1));
    this.pageInfo = paginationEl.createSpan({ cls: "page-info" });
    this.nextPageButton = new import_obsidian4.ButtonComponent(paginationEl).setButtonText("\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F").onClick(() => this.goToPage(this.currentPage + 1));
    this.lastPageButton = new import_obsidian4.ButtonComponent(paginationEl).setButtonText("\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u044F\u044F").onClick(() => this.goToPage(this.getTotalPages()));
    this.updatePagination();
  }
  renderHeader(table) {
    const thead = table.createTHead();
    const row = thead.insertRow();
    const columns = ["name", "extension", "folder", "createdAt", "modifiedAt", "size"];
    columns.forEach((column) => {
      const th = row.createEl("th");
      th.style.width = `${this.columnWidths[column]}px`;
      th.style.resize = "horizontal";
      th.addEventListener("mouseup", () => {
        this.columnWidths[column] = th.offsetWidth;
        this.plugin.settings.columnWidths = this.columnWidths;
        this.plugin.saveSettings();
      });
      const button = th.createEl("button");
      button.textContent = this.capitalizeFirstLetter(column);
      button.addEventListener("click", () => this.sortBy(column));
      const input = th.createEl("input", { type: "text" });
      input.placeholder = `Filter ${column}`;
      input.addEventListener("input", (event) => this.setFilter(column, event.target.value));
    });
  }
  renderBody(table) {
    if (!table) {
      const foundTable = this.containerEl.querySelector("table");
      if (foundTable instanceof HTMLTableElement) {
        table = foundTable;
      } else {
        console.error("Table element not found");
        return;
      }
    }
    const oldBody = table.tBodies[0];
    const newBody = document.createElement("tbody");
    const startIndex = (this.currentPage - 1) * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    const paginatedFiles = this.filteredFiles.slice(startIndex, endIndex);
    const groupedFiles = this.groupByFolder ? this.groupFilesByFolder(paginatedFiles) : { "\u0412\u0441\u0435 \u0444\u0430\u0439\u043B\u044B": paginatedFiles };
    let rootFolderRendered = false;
    Object.entries(groupedFiles).forEach(([folder, files]) => {
      if (this.currentFolder === "" || folder === this.currentFolder) {
        if (this.groupByFolder) {
          if (folder === "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430" || folder === "") {
            if (rootFolderRendered) {
              return;
            }
            rootFolderRendered = true;
            folder = "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
          }
          const folderRow = newBody.insertRow();
          const folderCell = folderRow.createEl("td", { attr: { colspan: "6" }, cls: "folder-header" });
          if (folder === "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430" || folder === "\u0412\u0441\u0435 \u0444\u0430\u0439\u043B\u044B") {
            folderCell.textContent = folder;
          } else {
            const folderName = folder.split("/").pop() || folder;
            folderCell.createSpan({ text: folderName, cls: "folder-name" });
            folderCell.createSpan({ text: ` (${folder})`, cls: "folder-path" });
          }
          const removeButton = folderCell.createEl("span", { cls: "remove-folder-button" });
          (0, import_obsidian4.setIcon)(removeButton, "cross");
          removeButton.title = "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437 \u0442\u0430\u0431\u043B\u0438\u0446\u044B";
          removeButton.style.cursor = "pointer";
          removeButton.style.marginLeft = "10px";
          removeButton.onclick = (e) => {
            e.stopPropagation();
            this.removeFolder(folder);
          };
        }
        files.forEach((file) => {
          const row = newBody.insertRow();
          const columns = ["name", "extension", "folder", "createdAt", "modifiedAt", "size"];
          columns.forEach((key) => {
            const cell = row.insertCell();
            const value = file[key];
            if (key === "name") {
              const iconSpan = cell.createSpan({ cls: "file-icon" });
              (0, import_obsidian4.setIcon)(iconSpan, file.icon);
              cell.createSpan({ text: value.toString() });
              cell.classList.add("file-name");
              cell.addEventListener("click", (event) => {
                event.preventDefault();
                event.stopPropagation();
                this.onFileOpen(file.path);
              });
            } else if (key === "size") {
              cell.textContent = this.formatFileSize(value);
            } else if (key === "folder") {
              const folderLink = cell.createEl("a", {
                text: value.toString(),
                cls: "file-folder-link",
                attr: { href: "#", title: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043F\u0430\u043F\u043A\u0443" }
              });
              folderLink.addEventListener("click", (event) => {
                event.preventDefault();
                event.stopPropagation();
                this.openFolder(value.toString());
                this.removeAllTooltips();
              });
              cell.classList.add("file-folder");
              this.addFolderPreviewHandler(folderLink, this.getFilesInFolder(value.toString()));
            } else {
              cell.textContent = value instanceof Date ? value.toLocaleString() : value.toString();
            }
          });
        });
      }
    });
    if (oldBody) {
      table.replaceChild(newBody, oldBody);
    } else {
      table.appendChild(newBody);
    }
  }
  removeFolder(folder) {
    var _a;
    console.log("Removing folder:", folder);
    if (this.plugin instanceof FileTablePlugin) {
      (_a = this.plugin.fileTableView) == null ? void 0 : _a.removeFolder(folder);
      this.updateFileTable();
    } else {
      console.error("Plugin is not an instance of FileTablePlugin");
    }
  }
  addFolderPreviewHandler(element, files) {
    let tooltip = null;
    const showTooltip = (event) => {
      this.removeAllTooltips();
      tooltip = this.createFolderPreviewTooltip(files);
      document.body.appendChild(tooltip);
      this.positionTooltip(tooltip, event.target);
    };
    const hideTooltip = () => {
      if (tooltip) {
        tooltip.remove();
        tooltip = null;
      }
    };
    element.addEventListener("mouseenter", showTooltip);
    element.addEventListener("mouseleave", hideTooltip);
  }
  createFolderPreviewTooltip(files) {
    const tooltip = document.createElement("div");
    tooltip.addClass("folder-preview-tooltip");
    const previewContent = files.slice(0, 5).map((file) => `- ${file.name}`).join("\n");
    const moreFiles = files.length > 5 ? `
... \u0438 \u0435\u0449\u0435 ${files.length - 5} \u0444\u0430\u0439\u043B(\u043E\u0432)` : "";
    try {
      import_obsidian4.MarkdownRenderer.renderMarkdown(previewContent + moreFiles, tooltip, "", this);
    } catch (error) {
      console.error("Error rendering markdown for folder preview:", error);
      tooltip.textContent = "Error rendering preview";
    }
    return tooltip;
  }
  positionTooltip(tooltip, target) {
    const rect = target.getBoundingClientRect();
    const tooltipRect = tooltip.getBoundingClientRect();
    let top = rect.bottom + window.scrollY;
    let left = rect.left + window.scrollX;
    if (left + tooltipRect.width > window.innerWidth) {
      left = window.innerWidth - tooltipRect.width;
    }
    if (top + tooltipRect.height > window.innerHeight) {
      top = rect.top - tooltipRect.height + window.scrollY;
    }
    tooltip.style.top = `${top}px`;
    tooltip.style.left = `${left}px`;
  }
  capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
  formatFileSize(bytes) {
    if (bytes === 0)
      return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }
  groupFilesByFolder(files) {
    return files.reduce((acc, file) => {
      const folderPath = file.path.split("/").slice(0, -1).join("/");
      const folder = folderPath || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430";
      if (!acc[folder])
        acc[folder] = [];
      acc[folder].push(file);
      return acc;
    }, {});
  }
  sortBy(column) {
    if (this.sortColumn === column) {
      this.sortDirection = this.sortDirection === "asc" ? "desc" : "asc";
    } else {
      this.sortColumn = column;
      this.sortDirection = "asc";
    }
    this.currentPage = 1;
    this.applyFiltersAndSort();
    const table = this.containerEl.querySelector("table");
    if (table) {
      const headers = table.querySelectorAll("th button");
      headers.forEach((button) => {
        var _a;
        button.classList.remove("sort-indicator", "asc", "desc");
        if (((_a = button.textContent) == null ? void 0 : _a.toLowerCase()) === column) {
          button.classList.add("sort-indicator", this.sortDirection);
        }
      });
    }
    this.renderBody();
  }
  setFilter(column, value) {
    this.filters[column] = value;
    this.currentPage = 1;
    this.applyFiltersAndSort();
    this.renderBody();
  }
  applyFiltersAndSort() {
    this.filteredFiles = this.files.filter(
      (file) => Object.entries(this.filters).every(([column, filterValue]) => {
        if (!filterValue)
          return true;
        const fileValue = file[column];
        if (column === "size") {
          return this.formatFileSize(fileValue).toLowerCase().includes(filterValue.toLowerCase());
        }
        return fileValue.toString().toLowerCase().includes(filterValue.toLowerCase());
      }) && (this.currentFolder === "" || file.folder === this.currentFolder) && !this.plugin.settings.hiddenFolders.some(
        (hiddenFolder) => file.folder === hiddenFolder || file.folder.startsWith(hiddenFolder + "/")
      )
    );
    this.filteredFiles.sort((a, b) => {
      const aValue = a[this.sortColumn];
      const bValue = b[this.sortColumn];
      if (aValue < bValue)
        return this.sortDirection === "asc" ? -1 : 1;
      if (aValue > bValue)
        return this.sortDirection === "asc" ? 1 : -1;
      return 0;
    });
    this.updatePagination();
  }
  openFolder(folderPath) {
    this.setFolderFilter(folderPath);
    this.removeAllTooltips();
  }
  getFilesInFolder(folderPath) {
    return this.files.filter((file) => file.folder === folderPath);
  }
  removeAllTooltips() {
    document.querySelectorAll(".folder-preview-tooltip").forEach((el) => el.remove());
  }
  updateFolderList() {
    const folders = new Set([""].concat(this.files.map((file) => file.folder)));
    this.allFolders = Array.from(folders).sort();
    if (this.folderDropdown) {
      this.folderDropdown.selectEl.empty();
      this.folderDropdown.addOption("", "\u0412\u0441\u0435 \u043F\u0430\u043F\u043A\u0438");
      this.allFolders.forEach((folder) => {
        if (folder !== "") {
          this.folderDropdown.addOption(folder, folder);
        }
      });
      this.folderDropdown.setValue(this.currentFolder);
    }
  }
  updateFileTable(files) {
    console.log("updateFileTable called in FileTable", files ? files.length : "no files provided");
    if (files) {
      this.setFiles(files);
    }
    this.groupByFolder = this.plugin.settings.groupByFolder;
    this.applyFiltersAndSort();
    this.updatePagination();
    this.renderBody();
    console.log("FileTable updated");
  }
  updatePagination() {
    const totalPages = this.getTotalPages();
    this.currentPage = Math.min(this.currentPage, totalPages);
    if (this.currentPage < 1)
      this.currentPage = 1;
    if (this.pageInfo) {
      this.pageInfo.textContent = `\u0421\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${this.currentPage} \u0438\u0437 ${totalPages}`;
    }
    if (this.firstPageButton)
      this.firstPageButton.setDisabled(this.currentPage === 1);
    if (this.prevPageButton)
      this.prevPageButton.setDisabled(this.currentPage === 1);
    if (this.nextPageButton)
      this.nextPageButton.setDisabled(this.currentPage === totalPages);
    if (this.lastPageButton)
      this.lastPageButton.setDisabled(this.currentPage === totalPages);
  }
  getTotalPages() {
    return Math.ceil(this.filteredFiles.length / this.pageSize);
  }
  goToPage(page) {
    const totalPages = this.getTotalPages();
    if (page >= 1 && page <= totalPages) {
      this.currentPage = page;
      this.renderBody();
      this.updatePagination();
    }
  }
};

// src/ui/SettingsTab.ts
var import_obsidian5 = require("obsidian");
var FolderSuggestModal = class extends import_obsidian5.FuzzySuggestModal {
  constructor(app, onChoose) {
    super(app);
    this.onChoose = onChoose;
  }
  getItems() {
    return this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian5.TFolder);
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item, evt) {
    this.onChoose(item.path);
  }
};
var SettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 File Table Plugin" });
    new import_obsidian5.Setting(containerEl).setName("\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F \u0444\u0430\u0439\u043B\u043E\u0432").setDesc("\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F \u0444\u0430\u0439\u043B\u043E\u0432, \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435 \u0437\u0430\u043F\u044F\u0442\u044B\u043C\u0438").addText((text) => text.setPlaceholder("pdf,cdr,eps").setValue(this.plugin.settings.fileExtensions.join(",")).onChange(async (value) => {
      this.plugin.settings.fileExtensions = value.split(",").map((ext) => ext.trim());
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("\u0413\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u043F\u0430\u043F\u043A\u0430\u043C").setDesc("\u0413\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0444\u0430\u0439\u043B\u044B \u043F\u043E \u043F\u0430\u043F\u043A\u0430\u043C \u0432 \u0442\u0430\u0431\u043B\u0438\u0446\u0435").addToggle((toggle) => toggle.setValue(this.plugin.settings.groupByFolder).onChange(async (value) => {
      this.plugin.settings.groupByFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("\u0420\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u0430\u0431\u043B\u0438\u0446\u044B").setDesc("\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435, \u0433\u0434\u0435 \u043E\u0442\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443 \u0444\u0430\u0439\u043B\u043E\u0432").addDropdown((dropdown) => dropdown.addOption("left", "\u0421\u043B\u0435\u0432\u0430").addOption("right", "\u0421\u043F\u0440\u0430\u0432\u0430").addOption("main", "\u0412 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439 \u043E\u0431\u043B\u0430\u0441\u0442\u0438").setValue(this.plugin.settings.openLocation).onChange(async (value) => {
      this.plugin.settings.openLocation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("CSS \u0444\u0430\u0439\u043B").setDesc("\u0418\u043C\u044F CSS \u0444\u0430\u0439\u043B\u0430 \u0434\u043B\u044F \u0441\u0442\u0438\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0430\u0431\u043B\u0438\u0446\u044B").addText((text) => text.setPlaceholder("styles.css").setValue(this.plugin.settings.cssFile).onChange(async (value) => {
      this.plugin.settings.cssFile = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("\u0420\u0430\u0437\u043C\u0435\u0440 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B").setDesc("\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430 \u043E\u0434\u043D\u043E\u0439 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0442\u0430\u0431\u043B\u0438\u0446\u044B").addText((text) => text.setPlaceholder("50").setValue(this.plugin.settings.pageSize.toString()).onChange(async (value) => {
      const pageSize = parseInt(value);
      if (!isNaN(pageSize) && pageSize > 0) {
        this.plugin.settings.pageSize = pageSize;
        await this.plugin.saveSettings();
      }
    }));
    this.renderFolderSection("\u041E\u0442\u043A\u0440\u044B\u0442\u044B\u0435 \u043F\u0430\u043F\u043A\u0438", this.plugin.settings.openFolders, this.addOpenFolder.bind(this), this.removeOpenFolder.bind(this));
    this.renderFolderSection("\u0421\u043A\u0440\u044B\u0442\u044B\u0435 \u043F\u0430\u043F\u043A\u0438", this.plugin.settings.hiddenFolders, this.addHiddenFolder.bind(this), this.removeHiddenFolder.bind(this));
  }
  renderFolderSection(title, folders, addCallback, removeCallback) {
    const sectionEl = this.containerEl.createEl("div", { cls: "folder-section" });
    new import_obsidian5.Setting(sectionEl).setName(title).setDesc(`\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043F\u0430\u043F\u043A\u0438 \u0434\u043B\u044F ${title.toLowerCase()}`).addButton((button) => button.setButtonText("\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u0430\u043F\u043A\u0443").onClick(() => {
      new FolderSuggestModal(this.app, (folder) => {
        addCallback(folder);
      }).open();
    }));
    folders.forEach((folder) => {
      new import_obsidian5.Setting(sectionEl).setName(folder || "\u041A\u043E\u0440\u043D\u0435\u0432\u0430\u044F \u043F\u0430\u043F\u043A\u0430").addButton((button) => button.setIcon("trash").setTooltip(`\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437 ${title.toLowerCase()}`).onClick(() => removeCallback(folder)));
    });
  }
  addOpenFolder(folder) {
    if (!this.plugin.settings.openFolders.includes(folder) && !this.plugin.settings.hiddenFolders.includes(folder)) {
      this.plugin.settings.openFolders.push(folder);
      this.plugin.settings.hiddenFolders = this.plugin.settings.hiddenFolders.filter((f) => f !== folder);
      this.plugin.saveSettings();
      this.display();
    }
  }
  removeOpenFolder(folder) {
    this.plugin.settings.openFolders = this.plugin.settings.openFolders.filter((f) => f !== folder);
    if (!this.plugin.settings.hiddenFolders.includes(folder)) {
      this.plugin.settings.hiddenFolders.push(folder);
    }
    this.plugin.saveSettings();
    this.display();
  }
  addHiddenFolder(folder) {
    if (!this.plugin.settings.hiddenFolders.includes(folder) && !this.plugin.settings.openFolders.includes(folder)) {
      this.plugin.settings.hiddenFolders.push(folder);
      this.plugin.settings.openFolders = this.plugin.settings.openFolders.filter((f) => f !== folder);
      this.plugin.saveSettings();
      this.display();
    }
  }
  removeHiddenFolder(folder) {
    this.plugin.settings.hiddenFolders = this.plugin.settings.hiddenFolders.filter((f) => f !== folder);
    this.plugin.saveSettings();
    this.display();
  }
};

// src/FileTablePlugin.ts
var DEFAULT_SETTINGS = {
  fileExtensions: ["pdf", "cdr", "eps"],
  groupByFolder: false,
  openLocation: "right",
  cssFile: "styles.css",
  openFolders: [],
  hiddenFolders: [],
  // Инициализируем пустым массивом
  pageSize: 50,
  columnWidths: {
    name: 200,
    extension: 100,
    folder: 150,
    createdAt: 150,
    modifiedAt: 150,
    size: 100
  }
};
var FileTablePlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this._fileTableView = null;
    this.currentStyleElement = null;
  }
  async onload() {
    await this.loadSettings();
    this.fileService = new FileService(this.app.vault, this.app);
    this._folderService = new FolderService(this.app.vault);
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerView(FILE_TABLE_VIEW_TYPE, (leaf) => {
      this._fileTableView = new FileTableView(leaf, this);
      return this._fileTableView;
    });
    this.addRibbonIcon("table", "Open File Table", () => {
      this.activateView();
    });
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
    this.registerEvent(this.app.vault.on("create", () => this.updateFileTable()));
    this.registerEvent(this.app.vault.on("delete", () => this.updateFileTable()));
    this.registerEvent(this.app.vault.on("rename", () => this.updateFileTable()));
    this.registerEvent(this.app.vault.on("modify", () => this.updateFileTable()));
    await this.loadSelectedCSS();
    this.updateFileTable();
    this.addCommand({
      id: "open-folder-filter-modal",
      name: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E\u0435 \u043E\u043A\u043D\u043E \u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u0430\u043F\u043A\u0438",
      callback: () => {
        new FolderFilterModal(this.app, this._folderService, (folder) => {
          if (this._fileTableView) {
            this._fileTableView.addFolder(folder);
          }
        }).open();
      }
    });
    this.addCommand({
      id: "reset-file-table",
      name: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443 \u0444\u0430\u0439\u043B\u043E\u0432",
      callback: () => {
        if (this._fileTableView) {
          this._fileTableView.resetTable();
        }
      }
    });
    this.addCommand({
      id: "refresh-file-table",
      name: "Refresh File Table",
      callback: () => this.updateFileTable()
    });
  }
  async loadSelectedCSS() {
    if (this.currentStyleElement) {
      this.currentStyleElement.remove();
    }
    let cssContent;
    try {
      const cssPath = (0, import_obsidian6.normalizePath)(this.manifest.dir + "/" + this.settings.cssFile);
      cssContent = await this.app.vault.adapter.read(cssPath);
    } catch (error) {
      console.error(`Failed to load CSS file: ${this.settings.cssFile}`, error);
      cssContent = await this.loadDefaultCSS();
    }
    this.currentStyleElement = document.createElement("style");
    this.currentStyleElement.textContent = cssContent;
    document.head.appendChild(this.currentStyleElement);
  }
  async loadDefaultCSS() {
    return `
      .file-table-container { /* Default styles */ }
      .file-table { /* Default styles */ }
      /* Add more default styles here */
    `;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    console.log("Saving settings:", this.settings);
    await this.saveData(this.settings);
    console.log("Settings saved");
    await this.loadSelectedCSS();
    console.log("CSS reloaded");
    if (this._fileTableView) {
      console.log("Updating file table view");
      await this._fileTableView.updateFileTable();
    } else {
      console.log("FileTableView is not initialized");
    }
  }
  async updateFileTable() {
    if (this._fileTableView) {
      await this._fileTableView.updateFileTable();
    } else {
      console.error("FileTableView is not initialized");
    }
  }
  async getAllFilesInScannedFolders() {
    const allFiles = [];
    for (const folder of this.settings.openFolders) {
      const files = await this.fileService.getFilesInFolder(folder, this.settings.fileExtensions);
      const visibleFiles = files.filter(
        (file) => !this.settings.hiddenFolders.some(
          (hiddenFolder) => file.folder === hiddenFolder || file.folder.startsWith(hiddenFolder + "/")
        )
      );
      allFiles.push(...visibleFiles);
    }
    return allFiles;
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(FILE_TABLE_VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf(false);
      await leaf.setViewState({ type: FILE_TABLE_VIEW_TYPE, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  // Публичные методы для доступа к функциональности fileService
  async getFilesInFolder(folderPath, extensions) {
    return this.fileService.getFilesInFolder(folderPath, extensions);
  }
  openFile(path) {
    this.fileService.openFile(path);
  }
  // Сделаем эти методы публичными
  get folderService() {
    return this._folderService;
  }
  get fileTableView() {
    return this._fileTableView;
  }
  // Сеттер для fileTableView
  set fileTableView(view) {
    this._fileTableView = view;
  }
};
var FILE_TABLE_VIEW_TYPE = "file-table-view";
var FileTableView = class extends import_obsidian6.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return FILE_TABLE_VIEW_TYPE;
  }
  getDisplayText() {
    return "File Table";
  }
  async onOpen() {
    this.fileTable = new FileTable(this.containerEl, (path) => this.plugin.openFile(path), this.plugin);
    await this.updateFileTable();
  }
  async onClose() {
  }
  async updateFileTable() {
    console.log("updateFileTable called in FileTableView");
    const files = await this.getFilesForOpenFolders();
    console.log("Files fetched:", files.length);
    if (this.fileTable) {
      this.fileTable.updateFileTable(files);
    } else {
      console.error("FileTable is not initialized");
    }
  }
  async getFilesForOpenFolders() {
    console.log("getFilesForOpenFolders called");
    const allFiles = [];
    for (const folder of this.plugin.settings.openFolders) {
      console.log("Fetching files for folder:", folder);
      const files = await this.plugin.getFilesInFolder(folder, this.plugin.settings.fileExtensions);
      console.log(`Found ${files.length} files in folder:`, folder);
      allFiles.push(...files);
    }
    console.log("Total files found:", allFiles.length);
    return allFiles;
  }
  addFolder(folder) {
    console.log("addFolder called with:", folder);
    if (!this.plugin.settings.openFolders.includes(folder) && !this.plugin.settings.hiddenFolders.includes(folder)) {
      this.plugin.settings.openFolders.push(folder);
      console.log("Folder added to openFolders:", this.plugin.settings.openFolders);
      this.plugin.saveSettings();
      console.log("Settings saved");
      this.updateFileTable();
    } else {
      console.log("Folder already in openFolders or hiddenFolders");
    }
  }
  removeFolder(folder) {
    console.log("removeFolder called with:", folder);
    this.plugin.settings.openFolders = this.plugin.settings.openFolders.filter((f) => f !== folder);
    if (!this.plugin.settings.hiddenFolders.includes(folder)) {
      this.plugin.settings.hiddenFolders.push(folder);
    }
    console.log("openFolders after removal:", this.plugin.settings.openFolders);
    console.log("hiddenFolders after addition:", this.plugin.settings.hiddenFolders);
    this.plugin.saveSettings().then(() => {
      console.log("Settings saved");
      this.updateFileTable();
    }).catch((error) => {
      console.error("Error saving settings:", error);
    });
  }
  resetTable() {
    console.log("resetTable called");
    this.plugin.settings.openFolders = [];
    console.log("openFolders reset:", this.plugin.settings.openFolders);
    this.plugin.saveSettings();
    console.log("Settings saved");
    this.updateFileTable();
  }
};

// src/main.ts
var MainPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    this.fileTablePlugin = new FileTablePlugin(this.app, this.manifest);
    await this.fileTablePlugin.onload();
  }
  async onunload() {
    await this.fileTablePlugin.onunload();
  }
};
